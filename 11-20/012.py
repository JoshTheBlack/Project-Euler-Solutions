# coding=utf-8
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
import time

t0 = time.time()

def countDivisors(n):
    result = 0
    sqrt_n = int(n**0.5)

    for i in range(1, sqrt_n + 1):
        if n % i == 0:
            result += 1

    result *= 2

    if sqrt_n**2 == n:
        result -= 1

    return result

def tri(n):
    return ((n+1)*(n)/2)

stop = 0
count = 0

while stop < 500:
    count += 1
    tnum = tri(count)
    stop = countDivisors(tnum)
    if stop >= 500:
        print(f"{tnum} is the {count} triangle number and has {stop} divisors")

t1 = time.time()
print(f"This calculation took {t1-t0} seconds.")